name: Production

on:
  push:
    branches:
      - master

jobs:
  build_and_push_docker_images:
    runs-on: ubuntu-latest
    steps:
      # Checkout the source code
      - uses: actions/checkout@v1

      - run: docker info

      - name: Install Docker Compose
        run: |
          echo Installing Docker Compose
          sudo curl -L "https://github.com/docker/compose/releases/download/1.25.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

      # Authenticate GitHub Actions with the AWS CLI
      - name: Assume Role
        uses: youyo/awscredswrap@master
        with:
          role_arn: ${{ secrets.ROLE_ARN }}
          duration_seconds: 3600
          role_session_name: 'awscredswrap@GitHubActions'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'

      # Prepare Docker images
      - name: Build Docker Images
        run: |
          # Create a new timestamp tag
          npm run docker:create-tag-file
          # Build the images and tag them with this timestamp tag
          npm run docker:build:prod

      # Print the current account and role in GitHub Actions output for debugging purposes
      - name: Identity Check
        run: aws sts get-caller-identity

      - name: Push Docker images to ECR
        run: npm run docker:push-to-ecr

      # When all is finished, upload the current app version as artifact,
      # to be easily reused by subsequent jobs in the workflow
      - name: Persist app version as artifact
        uses: actions/upload-artifact@v1
        with:
          name: tag
          path: tag.txt
  provision_infrastructure_database:
    runs-on: ubuntu-latest
    steps:
      # Clone source code
      - uses: actions/checkout@v1

      # Authenticate GitHub Actions with AWS CLI
      - name: Assume Role
        uses: youyo/awscredswrap@master
        with:
          role_arn: ${{ secrets.ROLE_ARN }}
          duration_seconds: 3600
          role_session_name: 'awscredswrap@GitHubActions'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'

      - name: Provision Database
        run: |
          npm run terraform:02_database

  provision_infrastructure_ecs_cluster:
    runs-on: ubuntu-latest
    steps:
      # Clone source code
        - uses: actions/checkout@v1

        # Authenticate GitHub Actions with AWS CLI
        - name: Assume Role
          uses: youyo/awscredswrap@master
          with:
            role_arn: ${{ secrets.ROLE_ARN }}
            duration_seconds: 3600
            role_session_name: 'awscredswrap@GitHubActions'
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: 'us-east-1'

        - name: Provision ECS cluster
          run: npm run terraform:03_cluster

  deploy:
    needs: [build_and_push_docker_images, provision_infrastructure_database, provision_infrastructure_ecs_cluster]
    runs-on: ubuntu-latest
    steps:
      # Clone source code
      - uses: actions/checkout@v1

      # Authenticate GitHub Actions with AWS CLI
      - name: Assume Role
        uses: youyo/awscredswrap@master
        with:
          role_arn: ${{ secrets.ROLE_ARN }}
          duration_seconds: 3600
          role_session_name: 'awscredswrap@GitHubActions'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'

      - name: Provision ECS cluster
        run: npm run terraform:03_cluster
